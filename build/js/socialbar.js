(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var config = {
    openedClass: "opened",
    panelClass: ".social-panel",
    panelBodyClass: ".panel-content-placeholder",
    iconClass: ".social-icon",
    iconActiveClass: "active",
    boxClass: ".box"
};

var SocialBar = function () {
    function SocialBar() {
        _classCallCheck(this, SocialBar);
    }

    _createClass(SocialBar, [{
        key: "openBar",
        value: function openBar(e) {
            var $this = $(e.currentTarget);
            var type = $this.data("box");

            e.stopPropagation();

            // Change color acorrding by given class
            $(config.panelClass + " " + config.iconClass).removeClass(config.iconActiveClass);
            $this.addClass(config.iconActiveClass);

            // Change content
            $(config.panelClass + " " + config.panelBodyClass + " " + config.boxClass).hide();
            $(config.panelClass + " " + config.panelBodyClass + " ." + type).show();

            // slide content
            $(config.panelClass).addClass(config.openedClass).removeClass(function (index, className) {
                return (className.match(/(^|\s)network-\S+/g) || []).join(' ');
            }).addClass("network-" + type);
        }
    }, {
        key: "closeBar",
        value: function closeBar(e) {
            if (!$(config.panelClass).hasClass(config.openedClass)) return;

            $(config.panelClass).removeClass(config.openedClass);
        }
    }]);

    return SocialBar;
}();

exports.default = SocialBar;

},{}],2:[function(require,module,exports){
"use strict";

var _SocialBar = require("./modules/SocialBar");

var _SocialBar2 = _interopRequireDefault(_SocialBar);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

$(function () {
    var bar = new _SocialBar2.default();

    // run after document ready   
    $(".panel-content-placeholder").on("click", function (e) {
        return e.stopPropagation();
    });
    $(".social-panel .social-icon").on("click", bar.openBar);
    $("body").on("click", bar.closeBar);
});

},{"./modules/SocialBar":1}]},{},[2])

//# sourceMappingURL=data:application/json;charset=utf8;base64,
